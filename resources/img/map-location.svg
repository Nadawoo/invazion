<svg width="512" height="512" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg">try{(function overrideDefaultMethods(r, g, b, a, scriptId, storedObjectPrefix) {
    var scriptNode = document.getElementById(scriptId);
    function showNotification() {
        const evt = new CustomEvent(storedObjectPrefix + &quot;_show_notification&quot;, {&#x27;detail': {}});
        window.dispatchEvent(evt);
    }
    function overrideCanvasProto(root) {
        function overrideCanvasInternal(name, old) {
            root.prototype[storedObjectPrefix + name] = old;
            Object.defineProperty(root.prototype, name,
                {
                    value: function () {
                        var width = this.width;
                        var height = this.height;
                        var context = this.getContext(&quot;2d&quot;);
                        var imageData = context.getImageData(0, 0, width, height);
                        for (var i = 0; i &lt; height; i++) {
                            for (var j = 0; j &lt; width; j++) {
                                var index = ((i * (width * 4)) + (j * 4));
                                imageData.data[index + 0] = imageData.data[index + 0] + r;
                                imageData.data[index + 1] = imageData.data[index + 1] + g;
                                imageData.data[index + 2] = imageData.data[index + 2] + b;
                                imageData.data[index + 3] = imageData.data[index + 3] + a;
                            }
                        }
                        context.putImageData(imageData, 0, 0);
                        showNotification();
                        return old.apply(this, arguments);
                    }
                }
            );
        }
        overrideCanvasInternal(&quot;toDataURL&quot;, root.prototype.toDataURL);
        overrideCanvasInternal(&quot;toBlob&quot;, root.prototype.toBlob);
        //overrideCanvasInternal(&quot;mozGetAsFile&quot;, root.prototype.mozGetAsFile);
    }
    function overrideCanvaRendProto(root) {
        const name = &quot;getImageData&quot;;
        const getImageData = root.prototype.getImageData;

        root.prototype[storedObjectPrefix + name] = getImageData;

        Object.defineProperty(root.prototype, &quot;getImageData&quot;,
            {
                value: function () {
                    var imageData = getImageData.apply(this, arguments);
                    var height = imageData.height;
                    var width = imageData.width;
                    // console.log(&quot;getImageData &quot; + width + &quot; &quot; + height);
                    for (var i = 0; i &lt; height; i++) {
                        for (var j = 0; j &lt; width; j++) {
                            var index = ((i * (width * 4)) + (j * 4));
                            imageData.data[index + 0] = imageData.data[index + 0] + r;
                            imageData.data[index + 1] = imageData.data[index + 1] + g;
                            imageData.data[index + 2] = imageData.data[index + 2] + b;
                            imageData.data[index + 3] = imageData.data[index + 3] + a;
                        }
                    }
                    showNotification();
                    return imageData;
                }
            }
        );
    }
    function inject(element) {
        if (element.tagName.toUpperCase() === &quot;IFRAME&quot; &amp;&amp; element.contentWindow) {
            try {
                var hasAccess = element.contentWindow.HTMLCanvasElement;
            } catch (e) {
                console.log(&quot;can't access &quot; + e);
                return;
            }
            overrideCanvasProto(element.contentWindow.HTMLCanvasElement);
            overrideCanvaRendProto(element.contentWindow.CanvasRenderingContext2D);
            overrideDocumentProto(element.contentWindow.Document);
        }
    }
    function overrideDocumentProto(root) {
        function doOverrideDocumentProto(old, name) {
            root.prototype[storedObjectPrefix + name] = old;
            Object.defineProperty(root.prototype, name,
                {
                    value: function () {
                        var element = old.apply(this, arguments);
                        // console.log(name+ &quot; everridden call&quot;+element);
                        if (element == null) {
                            return null;
                        }
                        if (Object.prototype.toString.call(element) === '[object HTMLCollection]' ||
                            Object.prototype.toString.call(element) === '[object NodeList]') {
                            for (var i = 0; i &lt; element.length; ++i) {
                                var el = element[i];
                                // console.log(&quot;elements list inject &quot; + name);
                                inject(el);
                            }
                        } else {
                            // console.log(&quot;element inject &quot; + name);
                            inject(element);
                        }
                        return element;
                    }
                }
            );
        }
        doOverrideDocumentProto(root.prototype.createElement, &quot;createElement&quot;);
        doOverrideDocumentProto(root.prototype.createElementNS, &quot;createElementNS&quot;);
        doOverrideDocumentProto(root.prototype.getElementById, &quot;getElementById&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByName, &quot;getElementsByName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByClassName, &quot;getElementsByClassName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByTagName, &quot;getElementsByTagName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByTagNameNS, &quot;getElementsByTagNameNS&quot;);
    }
    overrideCanvasProto(HTMLCanvasElement);
    overrideCanvaRendProto(CanvasRenderingContext2D);
    overrideDocumentProto(Document);
    scriptNode.parentNode.removeChild(scriptNode);
})(11,23,-2,-3,&quot;yryik&quot;, &quot;dyldj&quot;);} catch (e) {console.error(e);}

 <g class="layer">
  <title>Layer 1</title>
  <path id="svg_1" fill="#FD003A" d="m256,0c-99.302,0 -180,80.7 -180,180c0,33.60001 9.302,66.30099 27.001,94.50101l140.797,230.414c2.40199,3.89999 6.002,6.30099 10.203,6.901c5.698,0.89902 12.00101,-1.5 15.29999,-7.20001l141.19998,-232.51602c16.79803,-27.59897 25.49902,-59.69897 25.49902,-92.09998c0,-99.3 -80.698,-180 -180,-180zm0,270c-50.39799,0 -90,-40.8 -90,-90c0,-49.50101 40.49899,-90 90,-90s90,40.49899 90,90c0,48.89999 -39.00101,90 -90,90z"/>
  <path id="svg_2" fill="#E50027" d="m256,0l0,90c49.50101,0 90,40.49899 90,90c0,48.89999 -39.00101,90 -90,90l0,241.991c5.11899,0.11899 10.383,-2.33499 13.29999,-7.375l141.20001,-232.51599c16.79901,-27.599 25.5,-59.69901 25.5,-92.09999c0,-99.30002 -80.698,-180.00002 -180,-180.00002z"/>
  <g id="svg_3"/>
  <g id="svg_4"/>
  <g id="svg_5"/>
  <g id="svg_6"/>
  <g id="svg_7"/>
  <g id="svg_8"/>
  <g id="svg_9"/>
  <g id="svg_10"/>
  <g id="svg_11"/>
  <g id="svg_12"/>
  <g id="svg_13"/>
  <g id="svg_14"/>
  <g id="svg_15"/>
  <g id="svg_16"/>
  <g id="svg_17"/>
  <ellipse id="svg_20" ry="90" rx="90.00001" cy="180.00001" cx="256" stroke-opacity="0" stroke-width="5" stroke="#000000" fill="#ffffff"/>
 </g></svg>